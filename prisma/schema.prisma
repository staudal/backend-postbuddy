generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String        @id @default(cuid())
  first_name   String
  last_name    String
  email        String        @unique
  password     String
  created_at   DateTime      @default(now())
  address      String?
  city         String?
  zip_code     String?
  country      String        @default("Denmark")
  company      String        @default("No company")
  access_token String?       @unique
  role         String        @default("user")
  demo         Boolean       @default(false)
  campaigns    Campaign[]
  designs      Design[]
  integrations Integration[]
  orders       Order[]
  segments     Segment[]
  session      Session?
  subscription Subscription?
  uploads      Uploads[]

  @@map("users")
}

model Session {
  id         String   @id @default(cuid())
  user_id    String   @unique
  expires_at DateTime
  user       User     @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model Integration {
  id               String    @id @default(cuid())
  type             String
  verifier         String?
  token            String?
  token_created_at DateTime?
  scopes           String?
  shop             String?
  klaviyo_api_key  String?
  user_id          String
  user             User      @relation(fields: [user_id], references: [id])

  @@map("integrations")
}

model Segment {
  id         String    @id @default(cuid())
  name       String
  type       String
  user_id    String
  klaviyo_id String?
  created_at DateTime  @default(now())
  demo       Boolean   @default(false)
  campaign   Campaign?
  profiles   Profile[]
  user       User      @relation(fields: [user_id], references: [id])

  @@map("segments")
}

model Campaign {
  id                 String   @id @default(cuid())
  name               String
  status             String
  type               String
  created_at         DateTime @default(now())
  user_id            String
  segment_id         String   @unique
  design_id          String?
  discount_codes     String[]
  start_date         DateTime
  additional_revenue Float?
  confirmation_url   String?  @unique
  demo               Boolean  @default(false)
  design             Design?  @relation(fields: [design_id], references: [id])
  segment            Segment  @relation(fields: [segment_id], references: [id])
  user               User     @relation(fields: [user_id], references: [id])

  @@map("campaigns")
}

model Profile {
  id              String         @id @default(cuid())
  first_name      String
  last_name       String
  address         String
  city            String
  zip_code        String
  in_robinson     Boolean        @default(false)
  segment_id      String
  letter_sent     Boolean        @default(false)
  klaviyo_id      String?
  letter_sent_at  DateTime?
  email           String
  country         String         @default("Denmark")
  custom_variable String?
  demo            Boolean        @default(false)
  orders          OrderProfile[]
  segment         Segment        @relation(fields: [segment_id], references: [id])

  @@index([segment_id])
  @@map("profiles")
}

model Uploads {
  id      String @id @default(cuid())
  user_id String
  name    String
  url     String
  format  String
  height  Int
  width   Int
  user    User   @relation(fields: [user_id], references: [id])

  @@map("uploads")
}

model Subscription {
  id                   String  @id @default(cuid())
  subscription_id      String  @unique
  subscription_item_id String  @unique
  user_id              String  @unique
  status               String
  customer_id          String?
  user                 User    @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model Order {
  id             String         @id @default(cuid())
  created_at     DateTime       @default(now())
  order_id       String
  user_id        String
  amount         Float
  discount_codes String[]
  first_name     String
  last_name      String
  email          String
  address        String
  zip_code       String
  profiles       OrderProfile[]
  user           User           @relation(fields: [user_id], references: [id])

  @@map("orders")
}

model OrderProfile {
  order_id   String  @map("order_id")
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  profile_id String  @map("profile_id")
  profile    Profile @relation(fields: [profile_id], references: [id])

  @@id([order_id, profile_id])
  @@map("orders_profiles")
}

model Design {
  id        String     @id @default(cuid())
  user_id   String
  format    String     @default("a5-horizontal")
  name      String
  blob      String?
  thumbnail String?
  demo      Boolean    @default(false)
  campaigns Campaign[]
  user      User       @relation(fields: [user_id], references: [id])

  @@map("designs")
}
